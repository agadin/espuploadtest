name: Fetch File SHAs

on:
  push:
    branches:
      - main


permissions:  
  contents: write



jobs:
  get_shas:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Fetch File SHAs
        id: fetch_shas
        run: |
          # Define the files for which we want to fetch the SHA values
          files_to_fetch=("hall_effect_sensor_1.txt" "hall_effect_sensor_2.txt" "hall_effect_sensor_3.txt" "hall_effect_sensor_4.txt" "hall_effect_sensor_5.txt" "hall_effect_sensor_6.txt" "hall_effect_sensor_7.txt" "hall_effect_sensor_8.txt")

          # Initialize an empty JSON object
          shas={}

          # Loop through each file and fetch its SHA from the GitHub API
          for file in "${files_to_fetch[@]}"; do
              response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/contents/$file")
              sha=$(echo "$response" | jq -r .sha)

              # Check if SHA was retrieved successfully
              if [ "$sha" != "null" ]; then
                  shas["$file"]="$sha"
              else
                  echo "Failed to fetch SHA for $file"
              fi
          done

          # Convert the associative array to a JSON format
          echo "${shas[@]}" | jq -n 'reduce inputs as $item ({}; .[$item[0]] = $item[1])' --argjson files "$(echo "${files_to_fetch[@]}" | jq -R . | jq -s .)" --argjson shas "$(printf '%s\n' "${shas[@]}" | jq -R . | jq -s .)" 'reduce inputs as $file ({}; .[$file] = $shas[$file])' > sha_dump.json

      - name: Commit SHA JSON
        run: |
          git config --local user.email "you@example.com"
          git config --local user.name "Your Name"
          git add sha_dump.json
          git commit -m "Update SHA dump"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

